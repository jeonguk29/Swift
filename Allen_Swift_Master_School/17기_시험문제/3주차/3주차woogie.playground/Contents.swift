import UIKit

/*:
# 앨런 - Swift 마스터 스쿨 17기
*/
/*:
## 두번째 테스트 (3주차)
---
*/
/**>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 그동안 배운 내용의 복습 및 약간의 응용이 들어가 있을 뿐입니다. 이 문제를 잘 풀 수 있다고
 좋은 개발자가 될 수 있는 것도 아니고, 실망하거나 좌절할 필요도 없습니다.
 우린 이제 시작일 뿐입니다. 😄
 가장 중요한 것은 포기하지 않고, 꾸준함을 유지하는 것일뿐!
 안풀리면, 다음 문제로 넘어가면되고, 이번에 못풀면 잘 공부해서, 다음 번에 똑같은 문제를 잘 풀면됩니다.
 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>**/

// 서술형의 경우, 주석처리를 하고 작성하면 됩니다.
// (시간이 약간 모자랄 수도 있을 것 같긴한데, 되는 대로 풀어서, 슬랙 DM으로 전달해 주세요!)



/**==================================================================
 [1번 문제]
  - 아래 정수형의 num 변수와, (문자열 배열의) array 변수가 있어요.
    어떻게 해야, 100가지의 랜덤숫자를 이용해서 배열에서 넘치지 않고, 범위의 에러 없이
    배열 내부의 값을 꺼낼 수 있을까요?
    (아래처럼 범위가 넘치지 않고 반복 되도록 배열의 요소에 접근할 수 있는 방법을 제시)
    "Hello" -> "Jobs" -> "Swift" -> "Cook" -> "Hello"
    (힌트: 나머지 값은 때로는 아주 유용합니다.)
 ===================================================================**/


var num = Int.random(in: 1...100)
var array = ["Hello", "Jobs", "Swift", "Cook"] // var result = array[num % array.count] 엘런 답이 좀더 좋은 코드임


// 아래 주석을 제거하시면 됩니다.
var result = array[num % 4]
print(result)





/**==================================================================
 [2번 문제]
  - 삼항 연산자를 사용해서 "성공"과 "실패"를 출력하는 코드를 만들어 보세요.
    (삼항 연산자는 "?"와 ":"를 사용하는 문법)
    number의 변수의 랜덤 숫자가 70점 이상이면 "성공"을 출력
    number의 변수의 랜덤 숫자가 70점 미만이면 "실패"를 출력
 ===================================================================**/


var number = Int.random(in: 50...100)


// 아래 주석을 제거하시면 됩니다.
var isSuccess = (number >= 70 , "성공" ?? "실패")
print(isSuccess)

/*
 위에 문제 틀렸음
 
 var isSuccess = number >= 70 ? "성공" : "실패"
 print(isSuccess) 이코드가 정답 코드임
 */




/**==================================================================
 [3번 문제]
  -  아래의 반복문을 사용해서, 1부터 20사이의 숫자 중에서 2의 배수를 출력하는 코드를 완성하세요.
 ===================================================================**/


for num in 1...20 {
    
    // 여기에 코드를 작성
    if num % 2 == 0{
        print("2의 배수: \(num)")
    }
   
    
}







/**==================================================================
 [4번 문제]
  - 아래의 배열에서, 가장 큰 숫자를 찾아내는 함수의 구현을 완성시켜 보세요. 배열 전달시
    배열 내의 가장 큰 숫자를 찾아내서, 리턴을 하면 됩니다.
    (아래 배열의 경우, 가장 큰 숫자가 9이죠? 숫자 9를 리턴할 수 있도록 함수 내부를
     구현 하시면 됩니다.)
    (힌트: 함수 내부에 변수 하나를 만들고, 어떻게 하면 가장 큰 숫자를 지속적으로 이 변수에 담을 수 있을까요?)
    (잘못푸셔도 괜찮아요. 오늘 세션(시간 복잡도 관련 알고리즘 세션)에서 풀어드릴 예정입니다.)
 ===================================================================**/


var numArray = [4, 0, 1, 7, 9, 3]


// 대략적인 힌트
func findMaxNumber(array: [Int]) -> Int {
    var max = 0
    for i in array{
        if max < i {
            max = i
        }
    }
    return max
}

// 함수의 실행
findMaxNumber(array: numArray)






/**==================================================================
 [5번 문제]
  - 아래의 배열에서, 배열의 앞의 3개 요소를 교체할 수 있는 문법 2가지를 제시하세요.
    예시) 배열 내의 ["A, "B", "C"]를 ["x", "y", "z"]로 교체
    (힌트: 1.서브스크립트 / 2.정식문법)
 ===================================================================**/


var alphabetArray = ["A", "B", "C", "D", "E", "F", "G"]


// 아래 배열을 이용
["x", "y", "z"]

// 1. 서브스크립트

alphabetArray[0...2] = ["x", "y", "z"]
alphabetArray

// 2. 정식 문법
alphabetArray.replaceSubrange(0...2, with: ["x", "y", "z"])






/**==================================================================
 [6번 문제]
  - 아래의 puppy 배열에서, 가장 뒤쪽의 문자열 "p"를 제거하는 코드를 작성하세요.
    (힌트: 1) 뒤에서부터 인덱스 확인 2) 인덱스를 이용 배열에서 제거(삭제) )
 ===================================================================**/



var puppy = ["p", "u", "p", "p", "y"]

// 여기에 코드 작성
puppy.remove(at: 3)


// 배열 확인 및 출력
print(puppy)

/*
 틀렸음
 
 if let index = puppy.lastIndex(of: "p") {
     puppy.remove(at: index)
 }

 이코드가 마지막 인덱스를 확인하고 지우는 코드임
 */





/**==================================================================
 [7번 문제]
 - 아래의 딕셔너리에서, 키값 "A"에 해당하는 value값인 "Apple"을 꺼내서 출력하세요.
   (옵셔널 문자열값이 아닌 문자열 값으로 출력하세요.)
   (힌트: 옵셔널 바인딩)
 ===================================================================**/


var dic = ["A": "Apple", "B": "Banana", "C": "City"]


// 대략적인 힌트
var result2 = dic["A"]

// 추가적인 코드 필요
if let result2 = result2{
    print(result2)
}
    
  








/**==================================================================
 [8번 문제]
  - 소수를 판별하는 함수를 완성해 보세요.
    1) 소수인 경우, "소수입니다."를 출력
    2) 소수가 아닌 경우, "소수가 아닙니다."를 출력
    (소수는 1과 자기자신만으로 나누어 떨어지는 1보다 큰 양의 정수)
    (힌트: 숫자를 자기 자신으로 나누어보면 되겠죠?)
 ===================================================================**/

// 소수를 판별하는 함수를 완성하세요.
func primeNumber(num: Int) {
    if num % 1 == 0 && num % num == 0
    {
        print("소수입니다.")
    }else {
        // 아래 프린트 실행문을 포함하여 내부 코드 완성하시면 돼요.
        print("소수가 아닙니다.")
    }
}



primeNumber(num: 7)  // 소수입니다.
primeNumber(num: 4)  // 소수가 아닙니다.
primeNumber(num: 11) // 소수입니다.
primeNumber(num: 97) // 소수입니다.



/*
 오답
 정답은
 
 // 소수를 판별하는 함수를 완성하세요.
 func primeNumber(num: Int) {

     for i in 2..<num {
         if num % i == 0 {
             print("소수가 아닙니다.")
             return
         }
     }
     print("소수입니다.")
 }

 1과 자기자신을 빼고 나머지 수로 나누어서 떨어지면 아닌 것임
 */



/**==================================================================
 [9번 문제]
  -  다음의 제어전송문 4가지를 각각 쓰이는 경우와 어떻게 사용되는지 간단하게 설명하세요.
    (break / fallthrough / continue / return)
    (힌트1: break는 2가지 경우에 쓰입니다.)
    (힌트2: return은 리턴타입이 있는 함수/리턴타입이 없는 함수 구분해서, 설명해 주세요.)
 ===================================================================**/

// 1.break문
// switch-case문에서 해당 case에 아무것도 처리 하고싶지 않을때 사용
// 반복문에서 빠져 나갈때 사용

// 2.fallthrough문
// switch-case문에서 해당 case를 실행하고 바로 빠져나가지 않고 아래 case에 해당하는 코드까지 실행 시키고 싶을때 사용


// 3.continue문
// 반복문에서 만났을때 아래 코드를 실행 시키지 않고 해당 반복을 한번 뛰어 넘을때 사용


// 4.return문
// 리턴 타입이 있는 함수에서 해당 표현식을 확인하고 해당 함수를 호출 지점에 반환값을 던지고 해당 함수를 종료
// 리턴 타입이 없는 함수에서 함수를 종료





/**==================================================================
 [10번 문제]
  - Optional을 언래핑(Unrapping) 하는 4가지 방법은? 간단하게 서술로 쓰시면 됩니다.
 ===================================================================**/

// 1번 방법
// 강제 추출 방법 !을 이용


// 2번 방법
// if문을 통해 nil이 아닌걸 확인후 강제추출 방법


// 3번 방법
// 옵셔널 바인딩 if-let, guard-let 을 이용하는 방법 : 해당하는 상수에 nil이 아니고 바인딩이 되는 경우에 즉 값을 벗겨낼수 있는 경우에 바인딩이 되서 이용가능



// 4번 방법
//  ?? 옵셔널 채이닝 방법 nil일 경우 디폴트 값을 설정하여 사용






/**==================================================================
 [11번 문제]
 구글(google), 페이스북(facebook), 네이버(naver) 로그인을 위해, SiteLogin 이라는
 이름을 가진 Enum 타입이 아래에 있습니다. 그리고 열거형의 연관값으로 이메일과, 비밀번호가
 저장된 인스턴스가 login1이라는 변수에 저장되어 있습니다.
 
 스위치문(switch)을 사용해서 열거형을 분기처리하고, 연관값을 꺼내서 출력하는 코드를
 작성하세요.
 
 출력결과: "이메일 주소: google@gmail.com, 비밀번호: 0000"
 
  (힌트: 연관값을 어떻게 꺼낼 수 있을까요?)
 ===================================================================**/

// enum타입과 하나의 인스턴스 제시

enum SiteLogin {
    case google(email: String, password: String)
    case facebook(email: String, password: String)
    case naver(email: String, password: String)
}

var login1 = SiteLogin.google(email: "google@gmail.com", password: "0000")



// 아래 스위치문을 작성해서, 이메일과 비밀번호를 출력하는 코드를 완성하세요.

switch login1 {
case let (email, password) where google(email: String, password: String):
    print("이메일 주소: \(email), 비밀번호: \(password)")
default:
    print("")
}

/*
 값을 넣는 것은 성공했음 하지만
 
 switch login1 {
 case .google(email: let email, password: let password):
     print("이메일 주소: \(email), 비밀번호: \(password)")
 case .facebook(email: let email, password: let password):
     print("이메일 주소: \(email), 비밀번호: \(password)")
 case .naver(email: let email, password: let password):
     print("이메일 주소: \(email), 비밀번호: \(password)")
 }

 case처리는 하지 못했음
 where을 처리 할 필요없었음
 각각 케이스를 정의해주면 되고 디폴트는 경우가 3가지인걸 알아서 넘김
 
 */





/**==================================================================
 [12번 문제]
  - 클래스에서 저장속성이 뭘까요? 아는대로 설명해 보세요!
 ===================================================================**/

// 인스턴스를 찍어낼때 힙영역에 실질적으로 값을 저장할수 있도록 하는 속성을 말함









/**==================================================================
 [13번 문제]
  - 클래스에서 계산 속성이 뭘까요? 아는대로 설명해 보세요!
 ===================================================================**/

// 실질적으로는 메서드이고 어떠한 연관 값을 통하여 값을 반환 하는 함수가 있을때 계산 속성으로 만들 수 있음 장점은 연관된 2가지의 메서드를 하나의 속성으로 정의 할 수 있음









/**==================================================================
 [14번 문제]
  - 클래스와 구조체의 차이에 대해서, 아는대로 서술해 보세요.
 ===================================================================**/

// 클래스는 인스턴스를 생성시 힙영역에 찍어내고, 구조체는 인스턴스를 생성할떄 스택영역에다 찍어냄
// 만약 두개의 인스턴스를 저장하는 변수가 있다고 할때 다른 임의에 변수를 만들어 값을 복사한다고 하면
// 클래스의 인스턴스 변수는 값을 복사할때 메모리 주소를 복사 하고
// 구조체의 인스턴스 변수는 값을 복사할때 실질적인 값을 복사함 그래서
// 구조체는 어떻게 보면 값타입이고 클래스는 참조 타입이라고 할 수 있음












/**>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 수고 하셨습니다. 😄
 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>**/
